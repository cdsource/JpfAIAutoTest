package org.jpf.aitest.sample;

import static org.junit.Assert.fail;
import org.junit.Test;
import static org.junit.Assert.assertTrue;
import java.util.ArrayList;
import java.util.List;
import static org.jpf.aitest.runtime.WriteException.WritePrivateException;
import java.lang.reflect.Method;
import java.util.Vector;

/**
* The class <code>SampleClassTest</code> contains tests for the class <code>{@link SampleClass}</code>.
* <p>
* Copyright (c) 2017
* 
* @generatedBy wupf@asiainfo.com at 2018-04-17 07:09:20
* @author Administrator
* @version $Revision: 1.0 $
*/

public class SampleClassTest  {


  /**
  * Run the SampleClass method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:20
  *@see  Modifier=1   SampleClass)
  */
  @Test(timeout=1000)

  public void testSampleClass_2 () throws Exception
   {

    SampleClass result = new SampleClass();

    assertNotNull(result);

  }



  /**
  * Run the SampleClass method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:20
  *@see  Modifier=1   SampleClass(int i)
  */
  @Test(timeout=1000)

  public void testSampleClass_3 () throws Exception
   {

        int i =  Integer.MAX_VALUE;

    SampleClass result = new SampleClass(ci);

    assertNotNull(result);

  }



  /**
  * Run the a method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:28
  *@see  Modifier=1  void a)
  */
  @Test(timeout=1000)

  public void test_a_W4() throws Exception
  {

    try{

    SampleClass fixture = new SampleClass();

  fixture.a();

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the a method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:28
  *@see  Modifier=1  void a(int i)
  */
  @Test(timeout=1000)

  public void test_a_R5() throws Exception
  {

    try{

    int i =  Integer.MAX_VALUE;

    SampleClass fixture = new SampleClass();

  fixture.a(i);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the a method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:28
  *@see  Modifier=1  void a(int i)
  */
  @Test(timeout=1000)

  public void test_a_R6() throws Exception
  {

    try{

    int i =  Integer.MIN_VALUE;

    SampleClass fixture = new SampleClass();

  fixture.a(i);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the a method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:28
  *@see  Modifier=1  void a(int i)
  */
  @Test(timeout=1000)

  public void test_a_R7() throws Exception
  {

    try{

    int i =  0;

    SampleClass fixture = new SampleClass();

  fixture.a(i);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the a method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:28
  *@see  Modifier=1  void a(int i)
  */
  @Test(timeout=1000)

  public void test_a_R8() throws Exception
  {

    try{

    char i =  'a';

    SampleClass fixture = new SampleClass();

  fixture.a(i);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the a method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  void a(int i)
  */
  @Test(timeout=1000)

  public void test_a_NLP9() throws Exception
  {

    try{

    int i =  MD5;

    SampleClass fixture = new SampleClass();

  fixture.a(i);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the astatic method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=9  void astatic)
  */
  @Test(timeout=1000)

  public void test_astatic_W10() throws Exception
  {

    try{

    SampleClass.astatic();

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aint method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  int aint(int i,int j)
  */
  @Test(timeout=1000)

  public void test_aint_R11() throws Exception
  {

    try{

    int i =  Integer.MAX_VALUE;
    int j =  Integer.MAX_VALUE;

    SampleClass fixture = new SampleClass();

    int  result=
  fixture.aint(i,j);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aint method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  int aint(int i,int j)
  */
  @Test(timeout=1000)

  public void test_aint_R12() throws Exception
  {

    try{

    int i =  Integer.MAX_VALUE;
    int j =  Integer.MIN_VALUE;

    SampleClass fixture = new SampleClass();

    int  result=
  fixture.aint(i,j);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aint method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  int aint(int i,int j)
  */
  @Test(timeout=1000)

  public void test_aint_R13() throws Exception
  {

    try{

    int i =  Integer.MAX_VALUE;
    int j =  0;

    SampleClass fixture = new SampleClass();

    int  result=
  fixture.aint(i,j);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aint method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  int aint(int i,int j)
  */
  @Test(timeout=1000)

  public void test_aint_R14() throws Exception
  {

    try{

    int i =  Integer.MAX_VALUE;
    char j =  'a';

    SampleClass fixture = new SampleClass();

    int  result=
  fixture.aint(i,j);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aint method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  int aint(int i,int j)
  */
  @Test(timeout=1000)

  public void test_aint_R15() throws Exception
  {

    try{

    int i =  Integer.MIN_VALUE;
    int j =  Integer.MAX_VALUE;

    SampleClass fixture = new SampleClass();

    int  result=
  fixture.aint(i,j);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aint method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  int aint(String str)
  */
  @Test(timeout=1000)

  public void test_aint_R16() throws Exception
  {

    try{

    String str =  "abc123";

    SampleClass fixture = new SampleClass();

    int  result=
  fixture.aint(str);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aint method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  int aint(String str)
  */
  @Test(timeout=1000)

  public void test_aint_R17() throws Exception
  {

    try{

    String str =  "123";

    SampleClass fixture = new SampleClass();

    int  result=
  fixture.aint(str);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aint method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  int aint(String str)
  */
  @Test(timeout=1000)

  public void test_aint_R18() throws Exception
  {

    try{

    String str =  "中文";

    SampleClass fixture = new SampleClass();

    int  result=
  fixture.aint(str);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aint method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  int aint(String str)
  */
  @Test(timeout=1000)

  public void test_aint_R19() throws Exception
  {

    try{

    String str =  "中文123abc";

    SampleClass fixture = new SampleClass();

    int  result=
  fixture.aint(str);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aint method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  int aint(String str)
  */
  @Test(timeout=1000)

  public void test_aint_R20() throws Exception
  {

    try{

    String str =  "!@#$%^&*";

    SampleClass fixture = new SampleClass();

    int  result=
  fixture.aint(str);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aint method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  int aint(String str)
  */
  @Test(timeout=1000)

  public void test_aint_NLP21() throws Exception
  {

    try{

    String str =  MD5;

    SampleClass fixture = new SampleClass();

    int  result=
  fixture.aint(str);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aintstatic method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=9  int aintstatic(String str)
  */
  @Test(timeout=1000)

  public void test_aintstatic_R22() throws Exception
  {

    try{

    String str =  "abc123";

    int  result=
    SampleClass.aintstatic(str);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aintstatic method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=9  int aintstatic(String str)
  */
  @Test(timeout=1000)

  public void test_aintstatic_R23() throws Exception
  {

    try{

    String str =  "123";

    int  result=
    SampleClass.aintstatic(str);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aintstatic method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=9  int aintstatic(String str)
  */
  @Test(timeout=1000)

  public void test_aintstatic_R24() throws Exception
  {

    try{

    String str =  "中文";

    int  result=
    SampleClass.aintstatic(str);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aintstatic method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=9  int aintstatic(String str)
  */
  @Test(timeout=1000)

  public void test_aintstatic_R25() throws Exception
  {

    try{

    String str =  "中文123abc";

    int  result=
    SampleClass.aintstatic(str);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aintstatic method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=9  int aintstatic(String str)
  */
  @Test(timeout=1000)

  public void test_aintstatic_R26() throws Exception
  {

    try{

    String str =  "!@#$%^&*";

    int  result=
    SampleClass.aintstatic(str);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aintstatic method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=9  int aintstatic(String str)
  */
  @Test(timeout=1000)

  public void test_aintstatic_NLP27() throws Exception
  {

    try{

    String str =  MD5;

    int  result=
    SampleClass.aintstatic(str);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the along method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  long along)
  */
  @Test(timeout=1000)

  public void test_along_W28() throws Exception
  {

    try{

    SampleClass fixture = new SampleClass();

    long  result=
  fixture.along();

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the along method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  long along(List mlist)
  */
  @Test(timeout=1000)

  public void test_along_R29() throws Exception
  {

    try{

    List mlist =  new ArrayList();

    SampleClass fixture = new SampleClass();

    long  result=
  fixture.along(mlist);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the alongstatic method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=9  long alongstatic(List mlist)
  */
  @Test(timeout=1000)

  public void test_alongstatic_R30() throws Exception
  {

    try{

    List mlist =  new ArrayList();

    long  result=
    SampleClass.alongstatic(mlist);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aboolean method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  boolean aboolean)
  */
  @Test(timeout=1000)

  public void test_aboolean_W31() throws Exception
  {

    try{

    SampleClass fixture = new SampleClass();

    boolean  result=
  fixture.aboolean();

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aboolean method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  boolean aboolean(Vector v,long b)
  */
  @Test(timeout=1000)

  public void test_aboolean_R32() throws Exception
  {

    try{

    Vector v =  new Vector() ;
    long b =  Long.MAX_VALUE;

    SampleClass fixture = new SampleClass();

    boolean  result=
  fixture.aboolean(v,b);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aboolean method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  boolean aboolean(Vector v,long b)
  */
  @Test(timeout=1000)

  public void test_aboolean_R33() throws Exception
  {

    try{

    Vector v =  new Vector() ;
    long b =  Long.MIN_VALUE;

    SampleClass fixture = new SampleClass();

    boolean  result=
  fixture.aboolean(v,b);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aboolean method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  boolean aboolean(Vector v,long b)
  */
  @Test(timeout=1000)

  public void test_aboolean_R34() throws Exception
  {

    try{

    Vector v =  new Vector() ;
    long b =  0L;

    SampleClass fixture = new SampleClass();

    boolean  result=
  fixture.aboolean(v,b);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the aboolean method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=1  boolean aboolean(Vector v,long b)
  */
  @Test(timeout=1000)

  public void test_aboolean_NLP35() throws Exception
  {

    try{

    Vector v =  2700;
    long b =  null;

    SampleClass fixture = new SampleClass();

    boolean  result=
  fixture.aboolean(v,b);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the abooleanstatic method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=9  boolean abooleanstatic(Vector v,long b)
  */
  @Test(timeout=1000)

  public void test_abooleanstatic_R36() throws Exception
  {

    try{

    Vector v =  new Vector() ;
    long b =  Long.MAX_VALUE;

    boolean  result=
    SampleClass.abooleanstatic(v,b);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the abooleanstatic method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=9  boolean abooleanstatic(Vector v,long b)
  */
  @Test(timeout=1000)

  public void test_abooleanstatic_R37() throws Exception
  {

    try{

    Vector v =  new Vector() ;
    long b =  Long.MIN_VALUE;

    boolean  result=
    SampleClass.abooleanstatic(v,b);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the abooleanstatic method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=9  boolean abooleanstatic(Vector v,long b)
  */
  @Test(timeout=1000)

  public void test_abooleanstatic_R38() throws Exception
  {

    try{

    Vector v =  new Vector() ;
    long b =  0L;

    boolean  result=
    SampleClass.abooleanstatic(v,b);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the abooleanstatic method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=9  boolean abooleanstatic(Vector v,long b)
  */
  @Test(timeout=1000)

  public void test_abooleanstatic_NLP39() throws Exception
  {

    try{

    Vector v =  2700;
    long b =  null;

    boolean  result=
    SampleClass.abooleanstatic(v,b);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the pa method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  void pa)
  */
  @Test(timeout=1000)

  public void test_pa_W40() throws Exception
  {

    try{

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] {  };
    Object objParams[] = {  };

    Method method = testClass.getDeclaredMethod("pa", typeParams);
    method.setAccessible(true);

    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the pa method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  void pa(int i)
  */
  @Test(timeout=1000)

  public void test_pa_R41() throws Exception
  {

    try{

    int i =  Integer.MAX_VALUE;

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] { int.class  };
    Object objParams[] = { i };

    Method method = testClass.getDeclaredMethod("pa", typeParams);
    method.setAccessible(true);

    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the pa method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  void pa(int i)
  */
  @Test(timeout=1000)

  public void test_pa_R42() throws Exception
  {

    try{

    int i =  Integer.MIN_VALUE;

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] { int.class  };
    Object objParams[] = { i };

    Method method = testClass.getDeclaredMethod("pa", typeParams);
    method.setAccessible(true);

    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the pa method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  void pa(int i)
  */
  @Test(timeout=1000)

  public void test_pa_R43() throws Exception
  {

    try{

    int i =  0;

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] { int.class  };
    Object objParams[] = { i };

    Method method = testClass.getDeclaredMethod("pa", typeParams);
    method.setAccessible(true);

    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the pa method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  void pa(int i)
  */
  @Test(timeout=1000)

  public void test_pa_R44() throws Exception
  {

    try{

    char i =  'a';

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] { int.class  };
    Object objParams[] = { i };

    Method method = testClass.getDeclaredMethod("pa", typeParams);
    method.setAccessible(true);

    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the pa method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  void pa(int i)
  */
  @Test(timeout=1000)

  public void test_pa_NLP45() throws Exception
  {

    try{

    int i =  MD5;

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] { int.class  };
    Object objParams[] = { i };

    Method method = testClass.getDeclaredMethod("pa", typeParams);
    method.setAccessible(true);

    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the paint method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  int paint)
  */
  @Test(timeout=1000)

  public void test_paint_W46() throws Exception
  {

    try{

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] {  };
    Object objParams[] = {  };

    Method method = testClass.getDeclaredMethod("paint", typeParams);
    method.setAccessible(true);
    int result = (int)
    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the paint method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  int paint(String str)
  */
  @Test(timeout=1000)

  public void test_paint_R47() throws Exception
  {

    try{

    String str =  "abc123";

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] { String.class  };
    Object objParams[] = { str };

    Method method = testClass.getDeclaredMethod("paint", typeParams);
    method.setAccessible(true);
    int result = (int)
    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the paint method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  int paint(String str)
  */
  @Test(timeout=1000)

  public void test_paint_R48() throws Exception
  {

    try{

    String str =  "123";

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] { String.class  };
    Object objParams[] = { str };

    Method method = testClass.getDeclaredMethod("paint", typeParams);
    method.setAccessible(true);
    int result = (int)
    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the paint method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  int paint(String str)
  */
  @Test(timeout=1000)

  public void test_paint_R49() throws Exception
  {

    try{

    String str =  "中文";

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] { String.class  };
    Object objParams[] = { str };

    Method method = testClass.getDeclaredMethod("paint", typeParams);
    method.setAccessible(true);
    int result = (int)
    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the paint method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  int paint(String str)
  */
  @Test(timeout=1000)

  public void test_paint_R50() throws Exception
  {

    try{

    String str =  "中文123abc";

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] { String.class  };
    Object objParams[] = { str };

    Method method = testClass.getDeclaredMethod("paint", typeParams);
    method.setAccessible(true);
    int result = (int)
    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the paint method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  int paint(String str)
  */
  @Test(timeout=1000)

  public void test_paint_R51() throws Exception
  {

    try{

    String str =  "!@#$%^&*";

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] { String.class  };
    Object objParams[] = { str };

    Method method = testClass.getDeclaredMethod("paint", typeParams);
    method.setAccessible(true);
    int result = (int)
    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the paint method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  int paint(String str)
  */
  @Test(timeout=1000)

  public void test_paint_NLP52() throws Exception
  {

    try{

    String str =  MD5;

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] { String.class  };
    Object objParams[] = { str };

    Method method = testClass.getDeclaredMethod("paint", typeParams);
    method.setAccessible(true);
    int result = (int)
    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the palong method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  long palong)
  */
  @Test(timeout=1000)

  public void test_palong_W53() throws Exception
  {

    try{

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] {  };
    Object objParams[] = {  };

    Method method = testClass.getDeclaredMethod("palong", typeParams);
    method.setAccessible(true);
    long result = (long)
    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the palong method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  long palong(List mlist)
  */
  @Test(timeout=1000)

  public void test_palong_R54() throws Exception
  {

    try{

    List mlist =  new ArrayList();

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] { List.class  };
    Object objParams[] = { mlist };

    Method method = testClass.getDeclaredMethod("palong", typeParams);
    method.setAccessible(true);
    long result = (long)
    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the paboolean method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  boolean paboolean)
  */
  @Test(timeout=1000)

  public void test_paboolean_W55() throws Exception
  {

    try{

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] {  };
    Object objParams[] = {  };

    Method method = testClass.getDeclaredMethod("paboolean", typeParams);
    method.setAccessible(true);
    boolean result = (boolean)
    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the paboolean method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  boolean paboolean(Vector v,long b)
  */
  @Test(timeout=1000)

  public void test_paboolean_R56() throws Exception
  {

    try{

    Vector v =  new Vector() ;
    long b =  Long.MAX_VALUE;

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] { Vector.class ,long.class  };
    Object objParams[] = { v,b };

    Method method = testClass.getDeclaredMethod("paboolean", typeParams);
    method.setAccessible(true);
    boolean result = (boolean)
    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the paboolean method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  boolean paboolean(Vector v,long b)
  */
  @Test(timeout=1000)

  public void test_paboolean_R57() throws Exception
  {

    try{

    Vector v =  new Vector() ;
    long b =  Long.MIN_VALUE;

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] { Vector.class ,long.class  };
    Object objParams[] = { v,b };

    Method method = testClass.getDeclaredMethod("paboolean", typeParams);
    method.setAccessible(true);
    boolean result = (boolean)
    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the paboolean method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  boolean paboolean(Vector v,long b)
  */
  @Test(timeout=1000)

  public void test_paboolean_R58() throws Exception
  {

    try{

    Vector v =  new Vector() ;
    long b =  0L;

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] { Vector.class ,long.class  };
    Object objParams[] = { v,b };

    Method method = testClass.getDeclaredMethod("paboolean", typeParams);
    method.setAccessible(true);
    boolean result = (boolean)
    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the paboolean method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=2  boolean paboolean(Vector v,long b)
  */
  @Test(timeout=1000)

  public void test_paboolean_NLP59() throws Exception
  {

    try{

    Vector v =  2700;
    long b =  null;

    SampleClass fixture = new SampleClass();
    Class testClass = fixture.getClass();
    Class[] typeParams = new Class[] { Vector.class ,long.class  };
    Object objParams[] = { v,b };

    Method method = testClass.getDeclaredMethod("paboolean", typeParams);
    method.setAccessible(true);
    boolean result = (boolean)
    method.invoke(fixture, objParams);

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



  /**
  * Run the protectedname method test.
  *
  * @throws Exception
  * 
  * @generated By wupf@asiainfo.com 
  * @generated at 2018-04-17 07:09:29
  *@see  Modifier=4  void protectedname)
  */
  @Test(timeout=1000)

  public void test_protectedname_W60() throws Exception
  {

    try{

    SampleClass fixture = new SampleClass();

  fixture.protectedname();

   //请在这里增加检查点:比如 assertEquals(true, result);
    assertTrue(true);

    }catch(Exception ex){
      WritePrivateException(ex,Thread.currentThread().getStackTrace(),true);
      ex.printStackTrace();
      fail();
    }

  }



}