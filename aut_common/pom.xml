<?xml version="1.0"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.jpf.autounittest</groupId>
		<artifactId>autounittest</artifactId>
		<version>0.0.4</version>
	</parent>
	<artifactId>aut_common</artifactId>
	<name>aut_common</name>
	<version>${verion.aut.common}</version>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.eclipse.jdt</groupId>
			<artifactId>org.eclipse.jdt.core</artifactId>
			<version>3.15.0</version>
		</dependency>
		<dependency>
			<groupId>org.jpf</groupId>
			<artifactId>jpfshare</artifactId>
			<version>1.3</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-lib-src-webapps</id>
						<phase>package</phase>
						<configuration>
							<tasks>
								<!-- <delete dir="src/main/webapp/WEB-INF/lib" /> -->
								<copy todir="D:\jworkspaces\JpfUnitTest2\lib">
									<fileset dir="${project.build.directory}">
										<include name="*.jar" />
									</fileset>
								</copy>
								<copy todir="D:\jworkspaces\JpfUnitTest2\lib">
									<fileset dir="${project.build.directory}/lib">
										<include name="*.jar" />
									</fileset>
								</copy>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<!--指定outputDirectory -->
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
							<!-- <outputDirectory>${project.build.directory}/classes/lib</outputDirectory> 
								Alternatively use ${project.build.directory}/classes/lib as OutputDirectory 
								to integrate all jar-files into the main jar, but then you will need to add 
								custom classloading code to load the jars. -->
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>
</project>
